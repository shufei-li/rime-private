# default.custom.yaml
# encoding: utf-8
#本文件定义rime输入法的输入特性，包括输入方案，选词，按键，符号，快捷键等。
#下面内容大都是默认设置。在这里进行修改后重新部署小狼毫就会应用这边的修改。
#井号“#”后面的内容，比如本条，都是注释，不起代码的作用，只是用于说明。
#注意，本文件使用两个空格作为一个缩进，不能使用tab。
#注意，文件中使用的符号几乎都是英文符号。
#

patch:
  switcher:
    caption: 〔方案选单〕
    hotkeys:
    - Control+grave

  # 候选词 5 个
  menu:
    page_size: 9 #在这里修改每页候选词数，默认为5个。0为每页10个候选词。

  schema_list:
  #- schema: luna_pinyin  # 朙月拼音
  - schema: luna_pinyin_simp # 朙月拼音·简化字，可以按 ctrl+` 选择临时启用正體中文
  #- schema: luna_pinyin_fluency # 语句流
  #- schema: double_pinyin_flypy # 小鶴雙拼
  #- schema: wubi_pinyin  # 五笔拼音混合輸入
  #- schema: wubi86 # 五笔86
  #- schema: luna_pinyin_tw # 朙月拼音·臺灣正體，可以按 ctrl+` 選擇臨時啓用简体中文

  #
  #这里设定中英文切换相关内容
  #
 #注：
    #RIME默认情况下，在输入中文时按下Shift键会临时切换到英文状态，回车输入英文后恢复中文输入状态。
    #如果你想要Shift键直接上屏，之后切换为英文输入。有的或是用Control键进行切换。如此种种都可实现。
    #参数：
    #clear为“清除输入的拼音，并切换到英文”
    #noop为“无操作”
    #commit_text为“将已输入文字上屏，并切换英文”
    #inline_ascii为“保留输入的拼音，切换为英文。”
    #具体试试就知道了。
    #
  ascii_composer:
    good_old_caps_lock: true
    switch_key:
      Shift_L: commit_code #左shift
      Shift_R: commit_code  #右shift
      Control_L: noop #左ctrl
      Control_R: noop #右ctrl
      Caps_Lock: noop #大小写切换键
      Eisu_toggle: clear # 日文键盘的「英数」转换键

  # 默认标点符号
  # (如果不灵，则 把 luna_pinyin_simp.custom.yaml 里的 punctuator 部分注释掉 )
  #punctuator:
   # half_shape:
    # 列出和 英文标点 不同的 标点 (即打中文时需要 "特别改" 的标点)
    # 常用标点: 冒号 分号 顿号 名字分词号 逗号 句号 问号 感叹号 钱号 破折号 省略号
    # 成对标点: 双引号 单引号 书名号 括号

      # 常用标点
      #':' : '：'
      #';' : '；'
      #'\' : '、'
     # '/' : '/'
      #'|' : '·'
      #',' : '，'
     # '.' : '。'
     # '?' : '？'
     # '!' : '！'
     # '$' : '￥'
    #  '_' : '——'
    #  '^' : '……'

      # 成对标点
   #   '''' : { pair: [ '‘', '’' ] }
    #  '"' : { pair: [ '“', '”' ] }
    #  '<' : '《'
   #   '>' : '》'
     # '[' : '【'
   #   ']' : '】'
      #'(' : '（'
      #')' : '）'

#     其他标点样式参考。用它们替换上面的配置即可
#     更多参见 ori_default.yaml
#     '<' : [ 《, 〈, «, ‹ ]
#     '>' : [ 》, 〉, », › ]
#     '''' : { pair: [ '‘', '’' ] }
#     '"' : { pair: [ '“', '”' ] }
#     '/': ['/', '÷']
#     '\' : [ 、, '\', ＼ ]
#     '|' : [ ·, '|', ｜, '§', '¦' ]
#     '~' : [ '~', ～ ]
#     '%' : [ '%', ％, '°', '℃' ]
#     '$' : [ ￥, '$', '€', '£', '¥', '¢', '¤' ]
#     '*' : [ '*', ＊, ·, ・, ×, ※, ❂ ]
#     '[' : [ 「, 【, 〔, ［ ]
#     ']' : [ 」, 】, 〕,  ］ ]
#     '{' : [ 『, 〖, ｛ ]
#     '}' : [ 』, 〗, ｝ ]
  punctuator/import_preset: symbols
  #recognizer/patterns/punct: '^/([0-9]0?|[A-Za-z]+)$'
  recognizer/patterns/punct: '^/([A-Z|a-z]*|[0-9]|10)$'
punctuator:
  full_shape:
    #'*' :{ commit: × }
  half_shape:

    '*' : { commit: × }


  key_binder:
    bindings:
      #
      # 快捷键，更多参见 ori_default.yaml
      #
      - { when: always, accept: Shift+space, toggle: full_shape } # Shift+space 切换全角/半角
      - { when: has_menu, accept: minus, send: Page_Up }
      - { when: has_menu, accept: equal, send: Page_Down }
      #
      # paging
      #
      # - { when: has_menu, accept: comma, send: Page_Up }
      # - { when: has_menu, accept: period, send: Page_Down }
      #
      # more technical binding
      #
      # Emacs style
      # - { when: composing, accept: Control+p, send: Up }
      # - { when: composing, accept: Control+n, send: Down }
      # - { when: composing, accept: Control+b, send: Left }
      # - { when: composing, accept: Control+f, send: Right }
      # - { when: composing, accept: Control+a, send: Home }
      # - { when: composing, accept: Control+e, send: End }
      # - { when: composing, accept: Control+d, send: Delete }
      # - { when: composing, accept: Control+k, send: Shift+Delete }
      # - { when: composing, accept: Control+h, send: BackSpace }
      # - { when: composing, accept: Control+g, send: Escape }
      # - { when: composing, accept: Control+bracketleft, send: Escape }
      # - { when: composing, accept: Alt+v, send: Page_Up }
      # - { when: composing, accept: Control+v, send: Page_Down }
      # paging keys
      # - { when: composing, accept: ISO_Left_Tab, send: Page_Up }
      # - { when: composing, accept: Shift+Tab, send: Page_Up }
      # - { when: composing, accept: Tab, send: Page_Down }
      # - { when: has_menu, accept: minus, send: Page_Up }
      # - { when: has_menu, accept: equal, send: Page_Down }
      # - { when: paging, accept: comma, send: Page_Up }
      # - { when: has_menu, accept: period, send: Page_Down }
      # hotkey switch
      # - { when: always, accept: Control+Shift+1, select: .next }
      # - { when: always, accept: Control+Shift+2, toggle: ascii_mode }
      # - { when: always, accept: Control+Shift+3, toggle: full_shape }
      # - { when: always, accept: Control+Shift+4, toggle: simplification }
      # - { when: always, accept: Control+Shift+5, toggle: extended_charset }
      # - { when: always, accept: Control+Shift+exclam, select: .next }
      # - { when: always, accept: Control+Shift+at, toggle: ascii_mode }
      # - { when: always, accept: Control+Shift+numbersign, toggle: full_shape }
      # - { when: always, accept: Control+Shift+dollar, toggle: simplification }
      # - { when: always, accept: Control+Shift+percent, toggle: extended_charset }
      # - { when: always, accept: Shift+space, toggle: full_shape }
      # - { when: always, accept: Control+period, toggle: ascii_punct }
